import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
from sqlalchemy.orm import sessionmaker
from db.models import Term, Definition, Source, get_engine
from utils.security import encrypt_text, decrypt_text
from cryptography.fernet import InvalidToken


st.set_page_config(page_title="chet7 ‚Äî –°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤", layout="wide")

engine = get_engine()
Session = sessionmaker(bind=engine)
session = Session()

st.markdown("<h1 style='color:#3c75c0;'>üõ° chet7 ‚Äî –£—á—ë—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π</h1>", unsafe_allow_html=True)

menu = st.radio("üìå –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:", [
    "üè† –ì–ª–∞–≤–Ω–∞—è",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å",
    "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä",
    "üîé –ü–æ–∏—Å–∫",
    "üóë –£–¥–∞–ª–µ–Ω–∏–µ"
], horizontal=True)

st.markdown("---")

# === –ì–ª–∞–≤–Ω–∞—è
if menu == "üè† –ì–ª–∞–≤–Ω–∞—è":
    st.info("üéì –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–ø—É—Å–∫–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'.")
    st.markdown("""
    **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã**:
    - üóÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    - üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π (–∞–ª–≥–æ—Ä–∏—Ç–º Fernet)
    - üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
    - üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    - üìö –ü—Ä–∏–≤—è–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫ —Ç–µ—Ä–º–∏–Ω–∞–º

    **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏**:
    `Streamlit`, `PostgreSQL`, `SQLAlchemy`, `cryptography`, `dotenv`
    """)

# === –î–æ–±–∞–≤–∏—Ç—å
elif menu == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
    st.markdown("### ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
    with st.form("add_term_form"):
        name = st.text_input("üìò –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
        definition = st.text_area("üìù –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        source_title = st.text_input("üîó –ò—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ)")
        source_year = st.number_input("üìÖ –ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", 1900, 2100, 2024)
        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ä–º–∏–Ω")

        if submitted:
            if not name or not definition or not source_title:
                st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
            elif session.query(Term).filter_by(name=name).first():
                st.error("üö´ –¢–∞–∫–æ–π —Ç–µ—Ä–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                term = Term(name=name)
                encrypted = encrypt_text(definition)
                term.definitions.append(Definition(content=encrypted))

                source = session.query(Source).filter_by(title=source_title, year=source_year).first()
                if not source:
                    source = Source(title=source_title, year=source_year)

                term.sources.append(source)
                session.add(term)
                session.commit()
                st.success(f"‚úÖ –¢–µ—Ä–º–∏–Ω **{name}** –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")

# === –ü—Ä–æ—Å–º–æ—Ç—Ä
elif menu == "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä":
    st.markdown("### üìñ –í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã")
    terms = session.query(Term).all()
    if not terms:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    for t in terms:
        with st.expander(f"üìò {t.name}", expanded=False):
            for d in t.definitions:
                try:
                    st.markdown(f"üìù _{decrypt_text(d.content)}_")
                except:
                    st.markdown("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
            for s in t.sources:
                st.markdown(f"üîó **–ò—Å—Ç–æ—á–Ω–∏–∫**: `{s.title}` ({s.year})")
        st.divider()

# === –ü–æ–∏—Å–∫
elif menu == "üîé –ü–æ–∏—Å–∫":
    st.markdown("### üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ")
    col1, col2 = st.columns(2)

    with col1:
        search_term = st.text_input("üî§ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ—Ä–º–∏–Ω–∞")
        if st.button("–ù–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω"):
            results = session.query(Term).filter(Term.name.ilike(f"%{search_term}%")).all()
            if not results:
                st.warning("‚ùå –¢–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            for t in results:
                with st.expander(f"üìò {t.name}"):
                    for d in t.definitions:
                        try:
                            st.markdown(f"- _{decrypt_text(d.content)}_")
                        except:
                            st.markdown("- ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")

    with col2:
        keyword = st.text_input("üî§ –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        if st.button("–ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"):
            defs = session.query(Definition).all()
            found = False
            for d in defs:
                try:
                    text = decrypt_text(d.content)
                    if keyword.lower() in text.lower():
                        st.success(f"üìò **{d.term.name}** ‚Üí {text}")
                        found = True
                except:
                    continue
            if not found:
                st.info("–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")

# === –£–¥–∞–ª–µ–Ω–∏–µ
elif menu == "üóë –£–¥–∞–ª–µ–Ω–∏–µ":
    st.markdown("### üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
    terms = session.query(Term).all()
    if not terms:
        st.info("–ù–µ—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    else:
        selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", [t.name for t in terms])
        confirm = st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")

        if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω"):
            if not confirm:
                st.warning("–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.")
            else:
                term = session.query(Term).filter_by(name=selected).first()
                session.delete(term)
                session.commit()
                st.success(f"‚úÖ –¢–µ—Ä–º–∏–Ω **{selected}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
