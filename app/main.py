import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
from sqlalchemy.orm import sessionmaker
from db.models import Term, Definition, Source, get_engine
from utils.security import encrypt_text, decrypt_text
from cryptography.fernet import InvalidToken

st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤", layout="centered")

engine = get_engine()
Session = sessionmaker(bind=engine)
session = Session()

st.title("üìö –°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π (–∑–∞—â–∏—â—ë–Ω–Ω–∞—è)")

menu = st.sidebar.selectbox("–ù–∞–≤–∏–≥–∞—Ü–∏—è", [
    "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω",
    "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Ä–º–∏–Ω–æ–≤",
    "–£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω",
    "–ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä–∫–∏"
])

# === 1. –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω ===
if menu == "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω":
    st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞")

    name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
    definition = st.text_area("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
    source_title = st.text_input("–ò—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ)")
    source_year = st.number_input("–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", min_value=1900, max_value=2100, step=1, value=2024)

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
        if not name or not definition or not source_title:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
        else:
            existing_term = session.query(Term).filter_by(name=name).first()
            if existing_term:
                st.error("–¢–∞–∫–æ–π —Ç–µ—Ä–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                try:
                    encrypted = encrypt_text(definition)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    st.stop()

                term = Term(name=name)
                defn = Definition(content=encrypted)
                term.definitions.append(defn)

                source = session.query(Source).filter_by(title=source_title, year=source_year).first()
                if not source:
                    source = Source(title=source_title, year=source_year)

                term.sources.append(source)
                session.add(term)
                session.commit()
                st.success(f"–¢–µ—Ä–º–∏–Ω '{name}' –¥–æ–±–∞–≤–ª–µ–Ω (—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ).")

# === 2. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Ä–º–∏–Ω–æ–≤ ===
elif menu == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Ä–º–∏–Ω–æ–≤":
    st.subheader("üìñ –í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã")

    terms = session.query(Term).all()
    if not terms:
        st.info("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.")
    for t in terms:
        st.markdown(f"### {t.name}")
        for d in t.definitions:
            try:
                text = decrypt_text(d.content)
                st.markdown(f"- _–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_: {text}")
            except InvalidToken:
                st.markdown(f"- ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")
        for s in t.sources:
            st.markdown(f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: **{s.title}**, {s.year}")
        st.markdown("---")

# === 3. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ ===
elif menu == "–£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω":
    st.subheader("üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")

    terms = session.query(Term).all()
    names = [t.name for t in terms]
    if names:
        selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", names)
        if st.button("–£–¥–∞–ª–∏—Ç—å"):
            term = session.query(Term).filter_by(name=selected).first()
            if term:
                session.delete(term)
                session.commit()
                st.success(f"–¢–µ—Ä–º–∏–Ω '{selected}' —É–¥–∞–ª—ë–Ω.")
            else:
                st.warning("–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# === 4. –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä–∫–∏ ===
elif menu == "–ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä–∫–∏":
    st.subheader("üîé –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ")

    search_term = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ (–ø–æ–ª–Ω–æ–µ –∏–ª–∏ —á–∞—Å—Ç—å)")
    if st.button("–ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞"):
        results = session.query(Term).filter(Term.name.ilike(f"%{search_term}%")).all()
        if not results:
            st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            for t in results:
                st.markdown(f"### üìò {t.name}")
                for d in t.definitions:
                    try:
                        decrypted = decrypt_text(d.content)
                        st.markdown(f"- _{decrypted}_")
                    except:
                        st.markdown(f"- ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å.")

    st.markdown("---")

    keyword = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)")
    if st.button("–ù–∞–π—Ç–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é"):
        definitions = session.query(Definition).all()
        count = 0
        for d in definitions:
            try:
                text = decrypt_text(d.content)
                if keyword.lower() in text.lower():
                    st.markdown(f"- **{d.term.name}** ‚Üí {text}")
                    count += 1
            except:
                continue
        if count == 0:
            st.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    st.markdown("---")

    st.subheader("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —Ç–µ—Ä–º–∏–Ω—É")
    term_for_sources = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏"):
        term = session.query(Term).filter_by(name=term_for_sources).first()
        if not term:
            st.warning("–¢–∞–∫–æ–π —Ç–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            st.markdown(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞ **{term.name}**:")
            for s in term.sources:
                st.markdown(f"- {s.title} ({s.year})")
