from models import Term, Definition, Source, get_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql import func

engine = get_engine()
Session = sessionmaker(bind=engine)
session = Session()

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏:")

# 1. –î—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ—Ä–º–∏–Ω–æ–≤
duplicate_terms = session.query(Term.name, func.count(Term.id)) \
    .group_by(Term.name) \
    .having(func.count(Term.id) > 1).all()

if duplicate_terms:
    print("\n‚ÄºÔ∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ—Ä–º–∏–Ω–æ–≤:")
    for name, count in duplicate_terms:
        print(f"–¢–µ—Ä–º–∏–Ω '{name}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑(–∞)")
else:
    print("\n‚úÖ –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ—Ä–º–∏–Ω–æ–≤.")

# 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–µ—Ä–º–∏–Ω—É
orphan_definitions = session.query(Definition).filter(Definition.term_id == None).all()

if orphan_definitions:
    print(f"\n‚ÄºÔ∏è –ù–∞–π–¥–µ–Ω—ã {len(orphan_definitions)} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–µ—Ä–º–∏–Ω—É.")
else:
    print("\n‚úÖ –í—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–µ—Ä–º–∏–Ω–∞–º.")

# 3. –¢–µ—Ä–º–∏–Ω—ã –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
terms_without_sources = session.query(Term).filter(~Term.sources.any()).all()

if terms_without_sources:
    print(f"\n‚ö†Ô∏è –¢–µ—Ä–º–∏–Ω—ã –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {[t.name for t in terms_without_sources]}")
else:
    print("\n‚úÖ –í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–º–µ—é—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏.")

# 4. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤
sources_without_terms = session.query(Source).filter(~Source.terms.any()).all()

if sources_without_terms:
    print(f"\n‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤: {[s.title for s in sources_without_terms]}")
else:
    print("\n‚úÖ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–µ—Ä–º–∏–Ω–∞–º.")

session.close()
